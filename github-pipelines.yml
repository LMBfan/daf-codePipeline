image: onica/bitbucket-pipelines-aws:latest

pipelines:
  default:
    - step:
        deployment: production # Note: This setting limits concurrent builds. Runway will take care of the enviromnments. 
        script:
          - "which curl > /dev/null && \
             which pip > /dev/null || \
             (apt-get update && apt-get -y install curl python-pip)"
          - "which pipenv > /dev/null && \
             which runway > /dev/null || \
             pip install pipenv runway"
          - "if [ ! -d /opt/chefdk ]; then \
               curl -L https://omnitruck.chef.io/install.sh | bash -s -- -P chefdk; \
             fi"
          # - "if ! which npm > /dev/null; then \
          #      if [ ! -d /var/lib/apt/lists ] || [ \"$(ls -A /var/lib/apt/lists)\" ]; then \
          #        apt-get update; \
          #      fi; \
          #      apt-get -y install npm; \
          #      npm install npm@latest -g; \
          #      if ! which node > /dev/null; then \
          #        update-alternatives --install /usr/bin/node node /usr/bin/nodejs 10; \
          #      fi; \
          #    fi"
          # - "if ! which terraform > /dev/null; then \
          #      which jq > /dev/null && which unzip > /dev/null || \
          #      (apt-get update && apt-get -y install jq unzip); \
          #      mkdir /tmp/terraformtmp; \
          #      curl -o /tmp/terraformtmp/terraform.zip $(curl https://releases.hashicorp.com/index.json | jq -r '.terraform.versions | to_entries | map(select(.key | contains (\"-\") | not)) | sort_by(.key | split(\".\") | map(tonumber))[-1].value.builds | to_entries | map(select(.value.arch | contains(\"amd64\"))) | map(select(.value.os | contains(\"linux\")))[0].value.url'); \
          #      unzip /tmp/terraformtmp/terraform.zip -d /tmp/terraformtmp; \
          #      cp -p /tmp/terraformtmp/terraform /usr/local/bin/; \
          #      rm -r /tmp/terraformtmp;
          #    fi"
          - make test
          - "if [ -z \"$AWS_ACCESS_KEY_ID\" ]; then \
               echo \"AWS credentials not found; skipping deployment...\"; \
             elif [ -z \"$BITBUCKET_BRANCH\" ]; then \
               echo \"Current branch not found; skipping deployment...\"; \
             elif [[ \"$BITBUCKET_BRANCH\" != ENV-* ]] && [[ \"$BITBUCKET_BRANCH\" != master ]]; then \
               echo \"Current branch does not appear to be a valid environment; skipping deployment...\"; \
             else \
               make deploy; \
             fi"
